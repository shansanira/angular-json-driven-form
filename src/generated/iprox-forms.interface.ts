/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/form/{formId}/upload': {
    post: {
      parameters: {
        path: {
          formId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v1/form/{formId}/file/{fileId}': {
    delete: {
      parameters: {
        path: {
          formId: string;
          fileId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['Result'];
            'application/json': components['schemas']['Result'];
            'text/json': components['schemas']['Result'];
          };
        };
      };
    };
  };
  '/api/v1/form/{formId}': {
    post: {
      parameters: {
        path: {
          formId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': string;
          };
        };
      };
    };
  };
  '/api/v1/form/{guid}': {
    get: {
      parameters: {
        path: {
          guid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['FormResultDetailDto'];
          };
        };
      };
    };
  };
  '/api/v1/form/{guid}/data': {
    get: {
      parameters: {
        path: {
          guid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['Form'];
          };
        };
      };
    };
  };
  '/api/v1/form/{guid}/steps/{stepId}': {
    patch: {
      parameters: {
        path: {
          guid: string;
          stepId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SaveFormStepCommand'];
          'text/json': components['schemas']['SaveFormStepCommand'];
          'application/*+json': components['schemas']['SaveFormStepCommand'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['Form'];
          };
        };
      };
    };
  };
  '/api/v1/form-url': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['FormUrlDetailDto'][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
        /** @description Server Error */
        503: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
      };
    };
  };
  '/api/v1/language/form/{language}': {
    get: {
      parameters: {
        path: {
          language: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': Record<string, string>;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
      };
    };
  };
  '/api/v1/language/portal/{language}': {
    get: {
      parameters: {
        path: {
          language: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': Record<string, string>;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            'application/json':
              | components['schemas']['ProblemDetails']
              | components['schemas']['HttpValidationProblemDetails'];
          };
        };
      };
    };
  };
  '/api/tenant/settings.json': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['TenantSettings'];
          };
        };
      };
    };
  };
  '/api/v1/upload/{formId}/file': {
    post: {
      parameters: {
        path: {
          formId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthenticationBlock: components['schemas']['AuthenticationBlockBase'];
    AuthenticationBlockBase: {
      /** @default unspecified */
      authenticationLevel?: components['schemas']['StorkLevel'];
      /** Format: int32 */
      productName?: number;
      /** @default mustHave */
      required?: components['schemas']['RequiredMode'];
    } & components['schemas']['FormBlock'];
    BackOfficeHandler: {
      submitConfirmText?: string;
      from?: string;
    } & components['schemas']['Handler'];
    /** @enum {string} */
    Channels: 'none' | 'receipt' | 'email' | 'meta' | 'notification';
    Choice: {
      /** @default false */
      selected?: boolean;
      /** @default null */
      sideValue?: string;
    } & components['schemas']['Element'];
    Cluster: {
      /** Format: int32 */
      minimumCount?: number;
      /**
       * Format: int32
       * @default 1
       */
      maximumCount?: number;
      /** @default false */
      hideHeader?: boolean;
      fields?: (
        | components['schemas']['Cluster']
        | components['schemas']['DateField']
        | components['schemas']['InterField']
        | components['schemas']['KvkBusinessAddressSelect']
        | components['schemas']['KvkBusinessLocationSelect']
        | components['schemas']['LookupField']
        | components['schemas']['SelectionField']
        | components['schemas']['TextField']
        | components['schemas']['UploadField']
      )[];
      totalFields?: string[];
      rows?: components['schemas']['ClusterRow'][];
    } & components['schemas']['Field'];
    ClusterRow: {
      fields?: (
        | components['schemas']['Cluster']
        | components['schemas']['DateField']
        | components['schemas']['InterField']
        | components['schemas']['KvkBusinessAddressSelect']
        | components['schemas']['KvkBusinessLocationSelect']
        | components['schemas']['LookupField']
        | components['schemas']['SelectionField']
        | components['schemas']['TextField']
        | components['schemas']['UploadField']
      )[];
    };
    Condition: {
      formula?: string;
      /** @default none */
      result?: components['schemas']['ConditionResult'];
    };
    /** @enum {string} */
    ConditionResult: 'none' | 'false' | 'true';
    /** @enum {string} */
    DateCondition: 'afterToday' | 'todayOrAfter' | 'beforeToday' | 'todayOrBefore';
    DateField: {
      /** @default calendarDefault */
      dateFieldMode?: components['schemas']['DateFieldMode'];
      dateCondition?: components['schemas']['DateCondition'] | null;
      /** Format: date-time */
      dateFrom?: string | null;
      /** Format: date-time */
      dateTo?: string | null;
      disabledWeekDay?: number[];
      disabledDay?: string[];
    } & components['schemas']['Field'];
    /** @enum {string} */
    DateFieldMode: 'calendarDefault' | 'calendarNoYear' | 'calendarOpen' | 'calendarOpenNoYear' | 'dayMonthYear';
    EHerkenningBlock: components['schemas']['AuthenticationBlock'];
    EidasBlock: components['schemas']['AuthenticationBlock'];
    Element: {
      id?: string;
      uniqueId?: string;
      label?: string;
      alias?: string;
      explanation?: string;
      /** @default false */
      excludeFromSubmit?: boolean;
      /** @default false */
      showInOutput?: boolean;
      /** @default false */
      showInOverview?: boolean;
      showInForm?: boolean;
      precondition?: components['schemas']['Condition'][];
      displayHint?: string;
      values?: components['schemas']['ElementValue'][];
      custom1?: string;
      custom2?: string;
      custom3?: string;
    };
    ElementValue: {
      technicalValue?: string;
      displayValue?: string;
      alias?: string;
    };
    EmailHandler: {
      /** @default true */
      text?: boolean;
      /** @default true */
      html?: boolean;
      /** @default true */
      xml?: boolean;
      /** @default false */
      pdf?: boolean;
      to?: string;
      cc?: string;
      bcc?: string;
      submitConfirmText?: string;
      from?: string;
    } & components['schemas']['Handler'];
    EnableUHandler: {
      submitConfirmText?: string;
    } & components['schemas']['Handler'];
    ExactSynergyHandler: {
      submitConfirmText?: string;
    } & components['schemas']['Handler'];
    ExcelContext: components['schemas']['FormulaContext'];
    /** @enum {string} */
    ExplanationDisplay:
      | 'beforeLabel'
      | 'beginOfLabel'
      | 'endOfLabel'
      | 'betweenLabelAndInput'
      | 'betweenInputAndErrors'
      | 'afterErrors';
    Field: {
      /** @default false */
      prefill?: boolean;
      /** @default couldHave */
      required?: components['schemas']['RequiredMode'];
      /** @default false */
      readOnly?: boolean;
      /** @default false */
      hideLabel?: boolean;
      /** @default false */
      volatile?: boolean;
      defaultValue?: string;
      /** @default false */
      containsDefaultValue?: boolean;
      /** @default betweenLabelAndInput */
      explanationDisplay?: components['schemas']['ExplanationDisplay'];
      /** @default none */
      channels?: components['schemas']['Channels'];
    } & components['schemas']['ValidatingElement'];
    FieldData: {
      id?: string;
      value?: string;
    };
    FieldsBlock: {
      /**
       * Format: int32
       * @default 1
       */
      minimumCount?: number;
      /**
       * Format: int32
       * @default 1
       */
      maximumCount?: number;
      fields?: (
        | components['schemas']['Cluster']
        | components['schemas']['DateField']
        | components['schemas']['InterField']
        | components['schemas']['KvkBusinessAddressSelect']
        | components['schemas']['KvkBusinessLocationSelect']
        | components['schemas']['LookupField']
        | components['schemas']['SelectionField']
        | components['schemas']['TextField']
        | components['schemas']['UploadField']
      )[];
      blocks?: components['schemas']['FieldsBlock'][];
    } & components['schemas']['FormBlock'];
    Form: {
      theme?: string;
      siteName?: string;
      /** @default nl-NL */
      culture?: string;
      version?: string;
      /** Format: date-time */
      published?: string;
      /** Format: date-time */
      openFrom?: string;
      /** Format: date-time */
      openUntil?: string;
      help?: string;
      eventLog?: components['schemas']['FormEvent'][];
      excelXml?: string;
      steps?: (components['schemas']['InternalStep'] | components['schemas']['ProcessStep'])[];
      excel?: components['schemas']['ExcelContext'];
      /** @default false */
      hideNavigation?: boolean;
    } & components['schemas']['ValidatingElement'];
    /** @enum {string} */
    FormAction: 'start' | 'complete' | 'save' | 'restart' | 'view' | 'submit' | 'completeFail';
    FormBlock: {
      /** @default false */
      hideTitle?: boolean;
    } & components['schemas']['Group'];
    FormEvent: {
      /** Format: date-time */
      dateTime?: string;
      elementId?: string;
      formAction?: components['schemas']['FormAction'];
    };
    FormExit: {
      text?: string;
    } & components['schemas']['Element'];
    FormResultDetailDto: {
      form?: components['schemas']['Form'] | null;
      data?: string | null;
      /** Format: byte */
      pdf?: string | null;
    } & components['schemas']['FormResultListDto'];
    FormResultListDto: {
      /** Format: int32 */
      id?: number;
      /** Format: uuid */
      guid?: string;
      /** Format: int32 */
      formId?: number;
      ready?: boolean;
      createdUserId?: string | null;
      /** Format: date-time */
      createdDateTime?: string;
    };
    FormStep: {
      /** @default false */
      hideTitle?: boolean;
      /** @default none */
      localValidationResult?: components['schemas']['ValidationResult'];
    } & components['schemas']['Group'];
    FormUrlDetailDto: {
      /** Format: int32 */
      urlId?: number | null;
      /** Format: int32 */
      formId?: number;
      url?: string;
      urlType?: components['schemas']['UrlType'] | null;
      culture?: string | null;
    };
    FormulaContext: Record<string, never>;
    Group: {
      continuation?: components['schemas']['NextStep'][];
      termination?: components['schemas']['FormExit'][];
      /** @default false */
      excluded?: boolean;
      /** @default false */
      terminating?: boolean;
      nextId?: string;
    } & components['schemas']['ValidatingElement'];
    Handler: {
      /** @default false */
      hideProcess?: boolean;
    } & components['schemas']['Element'];
    HttpValidationProblemDetails: {
      errors?: Record<string, string[]>;
      [key: string]: unknown;
    } & components['schemas']['ProblemDetails'];
    ITrajectumHandler: {
      submitConfirmText?: string;
    } & components['schemas']['Handler'];
    IdentificationBlock: {
      identityProviders?: components['schemas']['IdentityProvider'];
    } & components['schemas']['AuthenticationBlockBase'];
    /** @enum {string} */
    IdentityProvider: 'none' | 'digid' | 'eherkenning' | 'eidas';
    InterField: {
      text?: string;
      fullWidth?: boolean;
    } & components['schemas']['Field'];
    InternalStep: {
      blocks?: (
        | components['schemas']['AuthenticationBlock']
        | components['schemas']['AuthenticationBlockBase']
        | components['schemas']['EHerkenningBlock']
        | components['schemas']['EidasBlock']
        | components['schemas']['FieldsBlock']
        | components['schemas']['IdentificationBlock']
        | components['schemas']['OverviewBlock']
        | components['schemas']['SigningBlock']
      )[];
      steps?: (components['schemas']['InternalStep'] | components['schemas']['ProcessStep'])[];
      /** @default none */
      localValidationResult?: components['schemas']['ValidationResult'];
    } & components['schemas']['FormStep'];
    KvkBusinessAddressSelect: components['schemas']['Field'];
    KvkBusinessLocationSelect: components['schemas']['Field'];
    LookupField: {
      lookupType?: string;
      errorOccurred?: boolean;
      errorText?: string;
    } & components['schemas']['TextField'];
    NextStep: {
      nextId?: string;
    } & components['schemas']['Element'];
    NoneHandler: {
      submitConfirmText?: string;
    } & components['schemas']['Handler'];
    OtherChoice: components['schemas']['Choice'];
    OverviewBlock: components['schemas']['FormBlock'];
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    ProcessProRelieveHandler: {
      submitConfirmText?: string;
    } & components['schemas']['Handler'];
    ProcessStep: {
      sendReceipt?: string;
      sendReceipt1?: string;
      sendReceipt2?: string;
      sendReceipt3?: string;
      sendNotification?: string;
      sendNotification1?: string;
      /** @default false */
      disableSendNotification?: boolean;
      handler?:
        | components['schemas']['EmailHandler']
        | components['schemas']['NoneHandler']
        | components['schemas']['BackOfficeHandler']
        | components['schemas']['EnableUHandler']
        | components['schemas']['ExactSynergyHandler']
        | components['schemas']['ITrajectumHandler']
        | components['schemas']['ProcessProRelieveHandler']
        | components['schemas']['SgmJoinHandler'];
    } & components['schemas']['InternalStep'];
    /** @enum {string} */
    RequiredMode: 'couldHave' | 'shouldHave' | 'mustHave';
    Result: components['schemas']['ResultResult'];
    ResultResult: {
      value?: components['schemas']['Result'] | null;
      status?: components['schemas']['ResultStatus'];
      isSuccess?: boolean;
      successMessage?: string | null;
      correlationId?: string | null;
      errors?: string[] | null;
      validationErrors?: components['schemas']['ValidationError'][] | null;
    };
    /** @enum {string} */
    ResultStatus:
      | 'ok'
      | 'error'
      | 'forbidden'
      | 'unauthorized'
      | 'invalid'
      | 'notFound'
      | 'conflict'
      | 'criticalError'
      | 'unavailable';
    SaveFormStepCommand: {
      fields?: components['schemas']['FieldData'][];
    };
    /** @enum {string} */
    SelectionDisplay: 'pulldown' | 'list' | 'box' | 'boxHorizontal' | 'button' | 'combo';
    SelectionField: {
      /** @default false */
      multiple?: boolean;
      /** @default pulldown */
      selectionDisplay?: components['schemas']['SelectionDisplay'];
      /** @default null */
      sideAlias?: string;
      choices?: (components['schemas']['Choice'] | components['schemas']['OtherChoice'])[];
      /** @default medium */
      selectionWidth?: components['schemas']['SelectionWidth'];
    } & components['schemas']['Field'];
    /** @enum {string} */
    SelectionWidth: 'medium' | 'small' | 'large';
    SgmJoinHandler: {
      submitConfirmText?: string;
    } & components['schemas']['Handler'];
    SigningBlock: {
      altered?: boolean;
      signed?: boolean;
      /** @default direct */
      signingMode?: components['schemas']['SigningMode'];
      service?: string;
      kvKCheck?: boolean;
    } & components['schemas']['FormBlock'];
    /** @enum {string} */
    SigningMode: 'direct' | 'gemnet' | 'eHerkenning' | 'iTrajectumSigningLite';
    /** @enum {string} */
    StorkLevel: 'unspecified' | 'level1' | 'level2' | 'level2Plus' | 'level3' | 'level4';
    TenantSettings: {
      tenantCode?: string;
      tenantName?: string;
    };
    TextField: {
      labelAfter?: string;
      /**
       * Format: int32
       * @default 1
       */
      lines?: number;
      /**
       * Format: int32
       * @default 2147483647
       */
      length?: number;
      /**
       * Format: int32
       * @default 2147483647
       */
      size?: number;
      /** @default text */
      textInputType?: components['schemas']['TextInputType'];
      pattern?: string;
      placeholder?: string;
      autoComplete?: string;
    } & components['schemas']['Field'];
    /** @enum {string} */
    TextInputType:
      | 'text'
      | 'multiLine'
      | 'password'
      | 'color'
      | 'date'
      | 'dateTime'
      | 'dateTimeLocal'
      | 'email'
      | 'euro'
      | 'euroWithCents'
      | 'naturalNumber'
      | 'month'
      | 'number'
      | 'range'
      | 'search'
      | 'telephone'
      | 'time'
      | 'url'
      | 'week'
      | 'zip'
      | 'bsn'
      | 'iban';
    UploadField: {
      /** Format: int32 */
      maximumSize?: number;
      /** Format: int32 */
      minimumCount?: number;
      /** Format: int32 */
      maximumCount?: number;
      fileTypes?: string;
    } & components['schemas']['Field'];
    /** @enum {string} */
    UrlType: 'form';
    ValidatingElement: {
      postcondition?: components['schemas']['Validation'][];
      /** @default none */
      validationResult?: components['schemas']['ValidationResult'];
    } & components['schemas']['Element'];
    Validation: {
      condition?: components['schemas']['Condition'];
      message?: string;
      /** @default mustConform */
      validationMode?: components['schemas']['ValidationMode'];
    };
    ValidationError: {
      identifier?: string | null;
      errorMessage?: string | null;
      errorCode?: string | null;
      severity?: components['schemas']['ValidationSeverity'];
    };
    /** @enum {string} */
    ValidationMode: 'shouldConform' | 'mustConform';
    /** @enum {string} */
    ValidationResult:
      | 'none'
      | 'completed'
      | 'warning'
      | 'completedWithWarning'
      | 'error'
      | 'completedWithError'
      | 'incompleteWithWarningAndError'
      | 'completedWithWarningAndError';
    /** @enum {string} */
    ValidationSeverity: 'error' | 'warning' | 'info';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
